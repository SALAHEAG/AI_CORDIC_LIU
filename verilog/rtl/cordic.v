/* Generated by Yosys 0.33+6 (git sha1 41b34a193, clang 11.0.1-2 -fPIC -Os) */


module cordic(A, B, Ci, S, Co);

input[9:0] A;
input[9:0] B;
input Ci;
output[9:0] S;
output Co;
wire[10:0] Sum33;
assign Sum33 = A + B + Ci ;
assign S = Sum33[9:0] ;
assign Co = Sum33[10] ;
endmodule

/* 
module cordic(clk, reset, start, angle, Exp, done,io_oeb);
  `ifdef USE_POWER_PINS
  	inout vccd1,
  	inout vssd1,
  `endif
  output wire [32:0] io_oeb;
  assign io_oeb = 32'b00000000000000001111111111111111;
  
  wire [15:0] _00_;
  wire _01_;
  wire [15:0] _02_;
  wire [15:0] _03_;
  wire [15:0] _04_;
  wire [15:0] _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire [15:0] _09_;
  wire [15:0] _10_;
  wire [15:0] _11_;
  reg [3:0] _12_;
  reg [15:0] _13_;
  reg [15:0] _14_;
  reg [15:0] _15_;
  wire [15:0] _16_;
  wire [15:0] _17_;
  wire [15:0] _18_;
  wire [15:0] _19_;
  wire [3:0] _20_;
  wire [3:0] _21_;
  wire [3:0] _22_;
  output [15:0] Exp;
  wire [15:0] Exp;
  input [15:0] angle;
  wire [15:0] angle;
  wire [15:0] atan_s;
  input clk;
  wire clk;
  wire [3:0] count_s;
  output done;
  wire done;
  wire dout;
  wire init_s;
  wire load_s;
  wire [15:0] newx_s;
  wire [15:0] newy_s;
  wire [15:0] newz_s;
  input reset;
  wire reset;
  wire s_s;
  wire [15:0] shiftxreg_s;
  wire [15:0] shiftyreg_s;
  input start;
  wire start;
  wire [15:0] temp_x;
  wire [15:0] temp_y;
  wire [15:0] temp_z;
  wire [15:0] xreg_s;
  wire [15:0] yreg_s;
  wire [15:0] zreg_s;
  assign _16_ = load_s ? newy_s : yreg_s;
  assign _17_ = init_s ? temp_y : _16_;
  assign _18_ = load_s ? newz_s : zreg_s;
  assign _19_ = init_s ? temp_z : _18_;
  assign _20_ = count_s + 4'h1;
  assign _21_ = load_s ? _20_ : count_s;
  assign _22_ = init_s ? 4'h1 : _21_;
  assign _01_ = ~ s_s;
  always @(posedge clk)
    _12_ <= _22_;
  always @(posedge clk)
    _13_ <= _11_;
  always @(posedge clk)
    _14_ <= _17_;
  always @(posedge clk)
    _15_ <= _19_;
  assign _00_ = load_s ? newx_s : xreg_s;
  assign _11_ = init_s ? temp_x : _00_;
  Eta_Adder16 add1 (.a(xreg_s),.b_in(shiftyreg_s),.sign(s_s),.sout(_02_));
  Eta_Adder16 add2 (.a(yreg_s),.b_in(shiftxreg_s),.sign(s_s),.sout(_03_));
  Eta_Adder16 add3 (.a(zreg_s),.b_in(atan_s),.sign(dout),.sout(_04_));
  fsm fsm1 (.clk(clk),.count(count_s),.done(_08_),.init(_06_),.load(_07_),.reset(reset),.start(start));
  rom lut (.i(count_s),.theta(_05_));
  shift shiftone (.counter(count_s),.inshift(xreg_s),.oshift(_09_));
  shift shifttwo (.counter(count_s),.inshift(yreg_s),.oshift(_10_));
  assign count_s = _12_;
  assign newx_s = _02_;
  assign newy_s = _03_;
  assign newz_s = _04_;
  assign xreg_s = _13_;
  assign yreg_s = _14_;
  assign zreg_s = _15_;
  assign atan_s = _05_;
  assign init_s = _06_;
  assign load_s = _07_;
  assign s_s = zreg_s[15];
  assign shiftyreg_s = _10_;
  assign shiftxreg_s = _09_;
  assign dout = _01_;
  assign temp_x = 16'h4e0c;
  assign temp_y = 16'h4e0c;
  assign temp_z = angle;
  assign Exp = yreg_s;
  assign done = _08_;
endmodule
*/
