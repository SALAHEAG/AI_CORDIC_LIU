/* Generated by Yosys 0.33+6 (git sha1 41b34a193, clang 11.0.1-2 -fPIC -Os) */

module fsm(clk, reset, start, count, init, load, done);
  wire [1:0] _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  reg [1:0] _07_;
  wire _08_;
  wire _09_;
  wire [1:0] _10_;
  wire _11_;
  wire _12_;
  wire [1:0] _13_;
  wire _14_;
  wire [1:0] _15_;
  input clk;
  wire clk;
  input [3:0] count;
  wire [3:0] count;
  output done;
  wire done;
  output init;
  wire init;
  output load;
  wire load;
  wire [1:0] nextstate;
  input reset;
  wire reset;
  input start;
  wire start;
  wire [1:0] state;
  assign _00_ = start ? 2'h1 : 2'h0;
  assign _08_ = state == 2'h0;
  assign _09_ = count == 4'hf;
  assign _10_ = _09_ ? 2'h2 : 2'h1;
  assign _11_ = state == 2'h1;
  assign _12_ = ~ start;
  assign _13_ = _12_ ? 2'h0 : 2'h2;
  assign _14_ = state == 2'h2;
  function [1:0] \30 ;
    input [1:0] a;
    input [5:0] b;
    input [2:0] s;
    (* parallel_case *)
    casez (s)
      3'b??1:
        \30  = b[1:0];
      3'b?1?:
        \30  = b[3:2];
      3'b1??:
        \30  = b[5:4];
      default:
        \30  = a;
    endcase
  endfunction
  assign _15_ = \30 (2'h0, { _13_, _10_, _00_ }, { _14_, _11_, _08_ });
  assign _01_ = state == 2'h0;
  assign _02_ = state == 2'h1;
  assign _03_ = state == 2'h2;
  function [0:0] \44 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* parallel_case *)
    casez (s)
      3'b??1:
        \44  = b[0:0];
      3'b?1?:
        \44  = b[1:1];
      3'b1??:
        \44  = b[2:2];
      default:
        \44  = a;
    endcase
  endfunction
  assign _04_ = \44 (1'hx, 3'h1, { _03_, _02_, _01_ });
  function [0:0] \49 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* parallel_case *)
    casez (s)
      3'b??1:
        \49  = b[0:0];
      3'b?1?:
        \49  = b[1:1];
      3'b1??:
        \49  = b[2:2];
      default:
        \49  = a;
    endcase
  endfunction
  assign _05_ = \49 (1'hx, 3'h2, { _03_, _02_, _01_ });
  function [0:0] \54 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* parallel_case *)
    casez (s)
      3'b??1:
        \54  = b[0:0];
      3'b?1?:
        \54  = b[1:1];
      3'b1??:
        \54  = b[2:2];
      default:
        \54  = a;
    endcase
  endfunction
  assign _06_ = \54 (1'hx, 3'h4, { _03_, _02_, _01_ });
  always @(posedge clk, posedge reset)
    if (reset) _07_ <= 2'h0;
    else _07_ <= nextstate;
  assign state = _07_;
  assign nextstate = _15_;
  assign init = _04_;
  assign load = _05_;
  assign done = _06_;
endmodule
